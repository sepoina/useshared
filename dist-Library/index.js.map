{"version":3,"file":"index.js","sources":["../src/useShared/useSharedHook.jsx","../src/useShared/SharedContext.jsx","../src/useShared/sharedClassTemplate.jsx","../src/useShared/index.jsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport {\n  useContext,\n  useEffect,\n  useState,\n  useId,\n} from 'react';\nimport { SharedGlobalContext } from '.';\n\nconst useSharedHook = (...arg) => {\n  //\n  // un  parametro = nome della variabile del context globale\n  // due parametri = context, nome della variabile del context \n  // tre parametri = context, nome della variabile del context, valore di default\n  //\n  const [context, key, defaultValue] = arg?.[0] instanceof Object ? [...arg] : [SharedGlobalContext, ...arg];\n  const { shared, subscribe, setter } = useContext(context);\n  const [, triggerRefresh] = useState(null); // () => state.current[key] fake for refresh\n  const uuid = useId();\n\n\n  useEffect(() => {\n    const unsubscribe = subscribe(uuid, key, (/* newSubState */) => {\n      // console.log(`local ${key} updated to ${newSubState}`);\n      triggerRefresh(a => a + 1); // fake refresh per evitare il doppio store\n    });\n\n    // Pulisci l'iscrizione quando il componente viene smontato\n    return () => {\n      unsubscribe(uuid, key);\n    };\n  }); /* ,[key, callback, subscribe, uuid */\n\n  // è una classe che contiene le azioni?\n  const isStruct = shared[key]?.__isStoreClass;\n  // distingue quando il valore è una struttura di azione (e allora sta in 'shared.state') o il valore sta direttamente nel shared[key]\n  const dataPointer = isStruct ? shared[key].state : shared[key];\n  // se arrivi qui da uno sharedClass, torna il valore\n  if (arg?.[arg?.length - 1] === \"useSharedClass\") return shared[key];\n  return [\n    dataPointer === undefined ? defaultValue : dataPointer,\n    (value) => setter(key, value), // espone la funzione di setter con il necessario valore di key\n    shared[key] // torna un puntatore alla classe che contiene le azioni \n  ]; // Restituisci solo la parte specifica dello stato\n};\n\nconst useSharedClass = (...arg) => {\n  return useSharedHook(...arg, \"useSharedClass\");\n}\n\nexport { useSharedHook, useSharedClass };","/* eslint-disable react/prop-types */\nimport { useRef, useMemo } from 'react';\nimport { SharedGlobalContext } from '.';\n\nconst SharedContext = (props) => {\n  //\n  // deposito dei dati condivisi\n  const shared = useRef(0);\n  //\n  // lista dei sottoscrittori\n  const subscribers = useRef({});\n\n\n  /** aggiornamento dello state, richiama tutte le callback dei sottoscrittori */\n  const setter = (key, newSubState) => {\n    if (!(key in (shared.current || {}))) return undefined; // error chiave inesistente \n    const data=shared.current[key];\n    //\n    //\n    // aggiorna il valore se si tratta di sharedClassTemplate\n    if (data.__isStoreClass) {\n      if (data.state === newSubState) return true; // no update\n      data.state = newSubState;\n      return; // nessuna notifica ci penserà il \"set state\" di sharedClassTemplate a richiamare notifyUpdate\n    }\n    //\n    //\n    // aggiorna il valore se è normale\n    if (data === newSubState) return; // no update\n    shared.current[key] = newSubState;\n    notifyUpdate(key, newSubState); // notifica diretta\n  };\n\n  const getter= (key) => {\n    if (!(key in (shared.current || {}))) return undefined; // error chiave inesistente \n    // se è una classe torna il suo state\n    if (shared.current[key].__isStoreClass) return shared.current[key].state;\n    // altrimenti è lo state\n    return shared.current[key];\n  }\n\n  /** \n   * Notifica l'update a tutti i sottoscrittori \n   */\n  const notifyUpdate = (key, newSubState) => {\n    // trasmetti l'update\n    console.log(`${key} updated to ${newSubState}`);\n    // console.log(JSON.stringify(state.current));\n    // console.log(JSON.stringify(subscribers.current));\n    // Notificare i sottoscrittori solo se il valore è cambiato\n    if (subscribers.current[key]) {\n      Object.values(subscribers.current[key]).forEach((callback) => {\n        callback(newSubState);\n      });\n    }\n  }\n\n  /** consente agli useShared di sottoscrivere con il loro uuid le variazioni di questo store. \n   * Viene richiamata la loro funzione di callback che serve per trasmettere il refresh. \n   * La funzione torna la de-sottoscrizione come funzione di ritorno */\n  const subscribe = (uuid, key, callback) => {\n    // Sottoscrivere solo per la chiave specificata\n    if (!subscribers.current[key]) subscribers.current[key] = {}; // crea spazio per i sottoscriventi\n    console.log(`subscribing to ${key}`);\n    subscribers.current[key][uuid] = callback;\n\n    // Ritornare una funzione di \"unsubscribe\"\n    return (uuid, key) => {\n      console.log(`unsubscribing to ${key}`);\n      if (subscribers.current?.[key]?.[uuid]) delete subscribers.current[key][uuid];\n    };\n  };\n\n\n\n\n\n  // ▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧▧\n  //\n  //                         Inizializza lo store\n  //\n  // ▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨\n\n  shared.current = useMemo(() => {\n    if (!props.share || !(props.share instanceof Object)) return {}; // se non c'è inizializzatore o non è un oggetto\n    //\n    // guarda tutte le variabili di share\n    // per ogni __isStoreClass salva in essa la funzione di notifica e la chiave della variabile\n    //\n    for (const entry in props.share) {\n      if (props.share?.[entry]) {\n        if (props.share?.[entry] && props.share[entry] instanceof Object && props.share[entry].__isStoreClass !== undefined) {\n          props.share[entry].__key = entry; // il nome della propria chiave\n          props.share[entry].__handleNotifyUpdate = notifyUpdate; // la funzione di notifica\n          props.share[entry].__setter = setter; // la funzione di setting per uso setShared\n          props.share[entry].__getter = getter; // la funzione di getting per uso getShared\n        }\n      }\n    }\n    return props.share;\n  }, [props]);\n\n  // se tra i parametri c'è il context\n  if (props.context) return (\n    <props.context.Provider value={{ shared: shared.current, setter, subscribe }}>\n      {props.children}\n    </props.context.Provider>\n  )\n  return (\n    <SharedGlobalContext.Provider value={{ shared: shared.current, setter, subscribe }}>\n      {props.children}\n    </SharedGlobalContext.Provider>\n  );\n};\n\nexport default SharedContext;","class sharedClassTemplate {\n    #state = {};\n    constructor() {\n        this.__isStoreClass = true;\n    }\n    get state() {\n        // console.log(\"getter!\");\n        return this.#state;\n    }\n\n    set state(newState) {\n        // console.log(\"setter!\");\n        if (this.#state === newState) return; // niente da updatare\n        // aggiorna lo state\n        this.#state = newState;\n        // se presente la funzione di notifica ai subscriber (dovrebbe) effettuala\n        this.__handleNotifyUpdate && this.__handleNotifyUpdate(this.__key, newState);\n        if (this._stateObserver) this._stateObserver(); // notifica ogni variazione\n    }\n\n    /**\n     * Setta una chiave della stessa collezione\n     * @param {*} key \n     * @param {*} newSubState \n     * @returns \n     */\n    setShared(key, newSubState) {\n        return (this.__setter && this.__setter(key, newSubState));\n    }\n\n    /**\n     * Recupera una chiave della stessa collezione\n     * @param {*} key \n     * @returns \n     */\n    getShared(key) {\n        return (this.__getter && this.__getter(key));\n    }\n}\n\nexport default sharedClassTemplate;","/* eslint-disable react-refresh/only-export-components */\n\nimport { createContext } from 'react';\nimport { useSharedHook, useSharedClass } from './useSharedHook';\nimport SharedContext from './SharedContext';\nimport sharedClassTemplate from './sharedClassTemplate';\n\nconst SharedGlobalContext = createContext();\n\nexport {\n    createContext as sharedCreateContext,    // funzione per creare una nuova costante di store da importare nei sottocomponenti. E' un createContext\n    SharedContext,                         // funzione per circondare i componenti e inserire l'inizializzazione dello store\n    useSharedHook as useShared,               // funzione in uso ai componenti per i dati dello store\n    useSharedClass,                                // hook che restituisce i metodi della classe;    \n    SharedContext as GlobalSharedContext, // lo store globale\n    SharedGlobalContext,                     // il context globale\n    sharedClassTemplate,                             // la classe da estendere per lo store\n};\n\n\n"],"names":["useSharedHook","arg","context","key","defaultValue","SharedGlobalContext","shared","subscribe","setter","useContext","triggerRefresh","useState","uuid","useId","useEffect","unsubscribe","a","dataPointer","_a","value","useSharedClass","SharedContext","props","useRef","subscribers","newSubState","data","notifyUpdate","getter","callback","_b","useMemo","entry","jsx","sharedClassTemplate","__privateAdd","_state","__privateGet","newState","__privateSet","createContext"],"mappings":"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"}